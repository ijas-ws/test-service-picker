# CD pipeline for backend-node-hapi-pg for development branch

name: backend-node-hapi-pg CD -- development

on:
  push:
    branches:
      - develop

jobs:
  docker-build-and-push:
    name: Docker build image and push
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout to branch
        uses: actions/checkout@v3

      - name: Get branch name
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF_NAME}

      # Configure AWS with credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build, tag, and push image to Amazon ECR
      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./backend-node-hapi-pg
        run: |
          docker compose build

      # Create and configure Amazon ECS task definition
      - name: Render Amazon ECS task definition
        id: backend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-node-hapi-pg/task-definition-${{ steps.vars.outputs.short_ref }}.json
          container-name: backend-container-${{ steps.vars.outputs.short_ref }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

      # Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-container.outputs.task-definition }}
          service: dev-web-app-BackendNodeHapiPg-backendservicedevelopService36EA188C-aAX4rea6z20Q
          cluster: backend-cluster-${{ steps.vars.outputs.short_ref }}

      # Logout of Amazon
      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      # Set `BRANCH` variable
      - name: Set env BRANCH
        run: echo "BRANCH=$(echo $GITHUB_REF | cur -d'/' -f 3)" >> $GITHUB_ENV

      # Get the current `environment`
      - name: Get `environment_name`
        id: env_vars
        run: |
          if [[ $BRANCH == 'master' ]]; then
            echo ::set-output name=environment_name::production
          elif [[ $BRANCH == 'qa' ]]; then
            echo ::set-output name=environment_name::qa
          else
            echo ::set-output name=environment_name::development
          fi
